rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if only musicLinks array is being updated
    function onlyUpdatingMusicLinks(newData, existingData) {
      let affectedKeys = newData.diff(existingData).affectedKeys();
      return affectedKeys.hasOnly(['musicLinks']);
    }

    // Users collection - users can read all, write own
    match /users/{userId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && request.auth.uid == userId;
    }

    // Artists collection - artists can read all, write own
    match /artists/{artistId} {
      allow read: if request.auth != null;
      allow create, delete: if request.auth != null && request.auth.uid == artistId;
      
      // Allow artists to update their own profile
      allow update: if request.auth != null && request.auth.uid == artistId;
      
      // Allow any authenticated user to update musicLinks array (for likes/plays/comments counts)
      allow update: if request.auth != null && 
                       onlyUpdatingMusicLinks(request.resource.data, resource.data);
      
      // MusicLinks subcollection - allow authenticated users to read and write
      match /musicLinks/{musicId} {
        allow read: if request.auth != null;
        allow write: if request.auth != null;
      }
    }

    // Events - all can read, only event owner can write
    match /events/{eventId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null &&
                       request.resource.data.artistId == request.auth.uid;
      allow update, delete: if request.auth != null &&
                               resource.data.artistId == request.auth.uid;
    }

    // Notifications - users can only read their own
    match /notifications/{notificationId} {
      allow read: if request.auth != null &&
                     request.auth.uid == resource.data.recipientId;
      allow create: if request.auth != null;
      allow update: if request.auth != null &&
                       request.auth.uid == resource.data.recipientId;
    }
  }
}